#    -*- mode: org -*-

* Core features
** DONE Implement Marsaglia KISS generators <2012-10-11 Thu>
** Implement Mersenne Twister and related SFMT
** Implement WELL algorithm
** Implement seeding routines, taking take to avoid "bad" seeds
** Implement unit tests and automatic test script

* Documentation
** Contributing document
** Library overview and function reference
** Mathematics behind each generator
** History of Marsaglia's generators (where did my implementations come from?)

* Miscellaneous enhancements
** Implement generators for floating point deviates
** Implement generators for distributions other than uniform
** To check: should seeds be declared as static?
** Implement parallel streams and "jumping ahead"
   First need to implement state structures for each generator
** Possibly implement other RNGs, including Park-Miller and RANLUX
** Add support for Windows systems

   Use something like:

     #ifdef _MSC_VER

     typedef __int32 int32_t;
     typedef unsigned __int32 uint32_t;
     typedef __int64 int64_t;
     typedef unsigned __int64 uint64_t;

     #else
     #include <stdint.h>
     #endif

   but more comprehensive.

** Force inlining of core generators?

   Using something like:

     #ifdef _MSC_VER
     #define INLINE __forceinline /* use __forceinline (VC++ specific) */
     #else
     #define INLINE inline        /* use standard inline */
     #endif

     INLINE void helloworld() { /* inline function body */ }

